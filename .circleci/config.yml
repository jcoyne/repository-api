version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/sdr-api
    docker:
      - image: circleci/buildpack-deps:stretch
references:
  default_docker_ruby_executor: &default_docker_ruby_executor
    image: circleci/ruby:2.7.1-node
    environment:
      BUNDLER_VERSION: 2.1.4
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      BUNDLE_PATH: vendor/bundle
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: sekret
      RAILS_ENV: test
      NOKOGIRI_USE_SYSTEM_LIBRARIES: true
  postgres: &postgres
    image: circleci/postgres:11
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: sdr
      POSTGRES_PASSWORD: sekret
jobs:
  test-branch:
    docker:
      - *default_docker_ruby_executor
      - *postgres
    steps:
      - checkout
      - run:
          name: Install bundler
          command: gem install bundler
      - run:
          name: Install gem dependencies
          command: bundle check || bundle install
      - run:
          name: Lint using rubocop
          command: bundle exec rubocop
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "API specification is valid OAS (but may have warnings, see below)"
            echo $result
            exit 0
            } || {
            echo $result
            exit 1
            }
      # Need `psql` command when you store the app schema as SQL instead of as Ruby
      - run:
          name: Install postgresql client
          command: |
            sudo apt update -y
            sudo apt install -y postgresql-client || true
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:test:prepare
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Run RSpec test suite
          command: bundle exec rspec
      - run:
          name: Send test coverage to CodeClimate
          command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
  test-merge:
    docker:
      - *default_docker_ruby_executor
      - *postgres
    steps:
      - checkout
      - run:
          name: Build against master branch
          command: |
            git config --global user.name "sul-devops-team"
            git config --global user.email "sul-devops-team@lists.stanford.edu"
            git config --global url."https://github.com/".insteadOf git@github.com:
            git fetch origin && git merge --no-edit origin/master
            if [[ $? -ne 0 ]]; then
            echo "Failed to merge `master` into $CIRCLE_BRANCH"
            exit 1
            fi
      - run:
          name: Install bundler
          command: gem install bundler
      - run:
          name: Install gem dependencies
          command: bundle check || bundle install
      - run:
          name: Lint using rubocop
          command: bundle exec rubocop
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "API specification is valid OAS (but may have warnings, see below)"
            echo $result
            exit 0
            } || {
            echo $result
            exit 1
            }
      # Need `psql` command when you store the app schema as SQL instead of as Ruby
      - run:
          name: Install postgresql client
          command: |
            sudo apt update -y
            sudo apt install -y postgresql-client || true
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:test:prepare
      - run:
          name: Run RSpec test suite
          command: bundle exec rspec
  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          docker build -t $IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: |
          docker save -o app_image.tar $IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
        - ./app_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
          docker push $IMAGE_NAME:$CIRCLE_TAG
workflows:
  version: 2
  test:
    jobs:
      - test-branch
      - test-merge:
          filters:
            branches:
              ignore: master
  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
          - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
          - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
