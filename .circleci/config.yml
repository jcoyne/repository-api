version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/sdr-api
    docker:
      - image: circleci/buildpack-deps:stretch
    
references:
  default_docker_ruby_executor: &default_docker_ruby_executor
    image: circleci/ruby:2.6.4-stretch-node
    environment:
      BUNDLER_VERSION: 2.1.4
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      BUNDLE_PATH: vendor/bundle
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
      NOKOGIRI_USE_SYSTEM_LIBRARIES: true
  postgres: &postgres
    image: circleci/postgres:11
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: sdr
      POSTGRES_PASSWORD: ""

jobs:
  build:
    docker:
      - *default_docker_ruby_executor
    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install Bundler
          command: gem install bundler
      - run:
          name: Which bundler?
          command: bundle -v
      - restore_cache:
          keys:
          - repository-api-bundle-v2-{{ checksum "Gemfile.lock" }}
          - repository-api-bundle-v2-
      - run:
          name: Bundle Install
          command: bundle check || bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          key: repository-apis-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
          - vendor/bundle
      - persist_to_workspace:
          root: .
          paths: '*'
  test:
    docker:
      - *default_docker_ruby_executor
      - *postgres
    steps:
      - attach_workspace:
          at: '~/project'
      - restore_cache:
          keys:
          - repository-api-bundle-v2-{{ checksum "Gemfile.lock" }}
          - repository-api-bundle-v2-
      - run:
          name: Install Bundler
          command: gem install bundler
      - run:
          name: Which bundler?
          command: bundle -v
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - run:
          name: Lint using rubocop
          command: bundle exec rubocop
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "API specification is valid OAS (but may have warnings, see below)"
            echo $result
            exit 0
            } || {
            echo $result
            exit 1
            }
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:test:prepare
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: rspec
          command: bundle exec rspec
      - run:
          name: upload test coverage report to Code Climate
          command: ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      # - store_test_results:
      #     path: test_results
  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          docker build -t $IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: |
          docker save -o app_image.tar $IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
        - ./app_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
          docker push $IMAGE_NAME:$CIRCLE_TAG

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
