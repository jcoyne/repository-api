openapi: 3.0.0
info:
  description: Stanford Digital Repository API
  version: 1.0.0
  title: SDR API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://sdr-api-{env}.stanford.edu'
    description: Production service
    variables:
      env:
        default: prod
  - url: 'https://sdr-api-{env}.stanford.edu'
    description: Staging service
    variables:
      env:
        default: stage
tags:
  - name: authentication
    description: Authenticate the user
  - name: objects
    description: Digital Repository Objects
  - name: files
    description: upload binary files
  - name: monitoring
    description: Monitoring and health checks
paths:
  /status:
    get:
      tags:
        - monitoring
      summary: View default healthcheck information
      responses:
        '200':
          description: OK
  /status/all:
    get:
      tags:
        - monitoring
      summary: View all healthcheck information
      responses:
        '200':
          description: OK
  /status/{check}:
    get:
      tags:
        - monitoring
      summary: View specified healthcheck information
      responses:
        '200':
          description: OK
      parameters:
        - name: check
          in: path
          required: true
          example: ruby_version
          schema:
            type: string
  /rails/active_storage/direct_uploads:
    post:
      tags:
        - files
      summary: Creates a new file resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"id":56,"key":"3eh3k0x16eysn9ivndmqjo5jdf4d","filename":"Gemfile.lock","content_type":"text/html","metadata":{},"byte_size":1082,"checksum":"A72Iwi4DGf80H7WM4VHuUw==","created_at":"2020-01-07T23:18:08.818Z","signed_id":"eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBQUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--8802f5d43bd2c192ef783e02c55481d129a51a72","direct_upload":{"url":"http://localhost:3000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDVG9JYTJWNVNTSWhNMlZvTTJzd2VERTJaWGx6YmpscGRtNWtiWEZxYnpWcVpHWTBaQVk2QmtWVU9oRmpiMjUwWlc1MFgzUjVjR1ZKSWc1MFpYaDBMMmgwYld3R093WlVPaE5qYjI1MFpXNTBYMnhsYm1kMGFHa0NPZ1E2RFdOb1pXTnJjM1Z0U1NJZFFUY3lTWGRwTkVSSFpqZ3dTRGRYVFRSV1NIVlZkejA5QmpzR1ZBPT0iLCJleHAiOiIyMDIwLTAxLTA3VDIzOjIzOjA4LjgyNFoiLCJwdXIiOiJibG9iX3Rva2VuIn19--ae7c0227ed5840f30b3293d2f2b6c8109397527a","headers":{"Content-Type":"text/html"}}}
  /rails/active_storage/disk/{id}:
    put:
      tags:
        - files
      summary: Upload the binary file resource
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          required: true
          example: eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDVG9JYTJWNVNTSWhhbkk1YlRNeFpuQnJkbmwxZG1zM01qYzFOM042ZURRMWRXYzBOQVk2QmtWVU9oRmpiMjUwWlc1MFgzUjVjR1ZKSWc1MFpYaDBMMmgwYld3R093WlVPaE5qYjI1MFpXNTBYMnhsYm1kMGFHa0Jrem9OWTJobFkydHpkVzFKSWgxemFURXZURE5xVEV0M05GRjVVRGw0UjNaMEsyRlJQVDBHT3daVSIsImV4cCI6IjIwMjAtMDEtMDlUMjE6MzI6NDguNDc1WiIsInB1ciI6ImJsb2JfdG9rZW4ifX0=--da785217f57ab55fe37e8de0a9c26b4d7612c187
          schema:
            type: string
  /v1/resources:
    post:
      tags:
        - objects
      summary: Creates a new object
      description: 'Does registration and accessioning of the object'
      operationId: 'objects#create'
      responses:
        '200':
          description: OK
      requestBody:
        description: The metadata for the object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deposit'
  /v1/auth/login:
    post:
      tags:
        - authentication
      summary: Retrieve a JSON web token for subsequent requests
      operationId: 'authentication#login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The access token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                  exp:
                    type: string
                    description: When the token will expire
                    format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  description: email address of the user
                  type: string
                  format: email
                password:
                  description: password of the user
                  type: string
                  example: sekr3t!
components:
  schemas:
    Druid:
      type: string
      pattern: '^druid:[b-df-hjkmnp-tv-z]{2}[0-9]{3}[b-df-hjkmnp-tv-z]{2}[0-9]{4}$'
      example: 'druid:bc123df4567'
    Access:
      type: object
      properties:
        embargoReleaseDate:
          type: string
          format: date-time
          example: '2029-06-22T07:00:00.000+00:00'
    DROAdministrative:
      type: object
      properties:
        hasAdminPolicy:
          $ref: '#/components/schemas/Druid'
        releaseTags:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTag'
      required:
        - hasAdminPolicy
    Deposit:
      type: object
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/object.jsonld'
            - 'http://cocina.sul.stanford.edu/models/3d.jsonld'
            - 'http://cocina.sul.stanford.edu/models/agreement.jsonl'
            - 'http://cocina.sul.stanford.edu/models/book.jsonld'
            - 'http://cocina.sul.stanford.edu/models/document.jsonld'
            - 'http://cocina.sul.stanford.edu/models/geo.jsonld'
            - 'http://cocina.sul.stanford.edu/models/image.jsonld'
            - 'http://cocina.sul.stanford.edu/models/page.jsonld'
            - 'http://cocina.sul.stanford.edu/models/photograph.jsonld'
            - 'http://cocina.sul.stanford.edu/models/manuscript.jsonld'
            - 'http://cocina.sul.stanford.edu/models/map.jsonld'
            - 'http://cocina.sul.stanford.edu/models/media.jsonld'
            - 'http://cocina.sul.stanford.edu/models/track.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-binary.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-seed.jsonld'
          example: item
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          type: string
        version:
          type: integer
        access:
          $ref: '#/components/schemas/Access'
        administrative:
          $ref: '#/components/schemas/DROAdministrative'
        identification:
          $ref: '#/components/schemas/Identification'
        structural:
          $ref: '#/components/schemas/DROStructural'
      required:
        - type
        - access
        - administrative
        - identification
        - structural
    BackgroundJobResultResponse:
      type: object
      properties:
        output:
          type: object
          description: output from the job
          $ref: '#/components/schemas/ErrorResponse'
        status:
          type: string
          description: the status of the background job
          enum:
            - pending
            - processing
            - complete
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        title:
          type: string
          description: 'a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem.'
          example: Invalid Attribute
        detail:
          type: string
          description: a human-readable explanation specific to this occurrence of the problem.
          example: Title must contain at least three characters.
        source:
          type: object
          properties:
            pointer:
              type: string
              example: /data/attributes/title
    Identification:
      type: object
      properties:
        catkey:
          description: If catkey is not provded, then label is required.  If catkey is provided, the label will be looked up from Sirsi.
          type: string
          example: "4084372"
        sourceId:
          type: string
          example: "bib4084372"
      required:
        - sourceId
    ReleaseTag:
      type: object
      properties:
        who:
          type: string
          example: petucket
        what:
          type: string
          enum:
            - self
            - collection
          example: self
        date:
          type: string
          format: date-time
        to:
          type: string
          example: Searchworks
        release:
          type: boolean
    DROStructural:
      type: object
      properties:
        isMemberOf:
          description: 'what collection is this object a member of'
          $ref: '#/components/schemas/Druid'
        hasMember:
          description: 'file sets for this object'
          type: array
          items:
            type: object
      required:
        - isMemberOf
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
